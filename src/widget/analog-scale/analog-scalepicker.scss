$analog-picker-tick-color: black !default;
$border: 1px solid $analog-picker-tick-color;
$analog-picker-handle-color: #d42c2c !default;
$analog-picker-width: 150px !default;
$analog-picker-min-height: 400px !default;
$analog-picker-max-height: 800px !default;
$q-pad-left: 0px !default;
$q-pad-right: 0px !default;


@mixin ticks($orientation: "vertical") {
    @if $orientation=="horizontal" {
        span {
            padding: 4px 0;
            background-image: linear-gradient(270deg, $analog-picker-tick-color 1px, transparent 0px);
            background-repeat: repeat-x;
            background-origin: content-box;
            background-size: 10% 100%;
        }
    }

    @else {
        span {
            padding: 0 25%;
            background-image: linear-gradient(0deg, $analog-picker-tick-color 1px, transparent 0px);
            background-repeat: repeat-y;
            background-origin: content-box;
            background-size: 100% 10%;
        }
    }
}

.or-analog-scale-initialized {
    position: relative;

    // Using a dirty trick, knowing that only original question-labels have a lang attribute
    .label-content {
        .question-label.active {
            display: inline;

            &[lang] {
                display: none;
            }
        }
    }

    // Overridden by show value box.
    .range-widget__current {
        visibility: hidden;
    }

    >.widget:not(.or-comment-widget) {
        // override main.scss style
        // The margin-bottom is maintained to 
        // have space for the constraint message in the horizontal
        // analog scale widget.
        margin: 0 0 9px 0;
    }

    .show-value__box {
        background-color: black;
        text-align: center;
        color: white;
        max-width: 170px;
        padding: 10px 35px;
        margin: 20px auto;

        @extend h5;

        @include font-normal;
    }

    .show-value__value {
        font-weight: bold;
        font-size: $font-size-base * 1.25;
        padding: 8px;
        display: block;
        min-width: 1px;
        min-height: $font-size-base * 1.25 + 22px;
    }

    .max-label,
    .min-label {
        @include font-normal;

        text-align: center;
    }


    &:not(.or-appearance-no-ticks) {

        .range-widget {
            &__ticks {
                @include ticks('vertical');

                &__scale {

                    &__start,
                    &__end {
                        display: none;
                    }
                }
            }
        }

        &.or-appearance-horizontal {
            .range-widget {
                &__ticks {
                    @include ticks('horizontal');
                }
            }
        }
    }

    &.or-appearance-no-ticks {
        .range-widget {
            &__scale {

                &__start,
                &__end {
                    display: none;
                }
            }
        }
    }

    &.or-appearance-horizontal {

        .analog-scale-widget {
            display: flex;
        }

        .range-widget {
            flex: 1;

            // adjust default range widget 
            &__wrap {
                height: 117px
            }

            // adjust default range widget
            &__current {
                line-height: 38.5px;
            }

            // adjust default range widget
            [type=range] {
                top: 33.5px;
            }
        }

        .max-label,
        .min-label {
            width: 80px;
            align-self: center;
        }

    }

    &:not(.or-appearance-horizontal) {
        @include display-flex;

        @include flex(1);

        @include flex-direction(row);

        .label-content {
            @include flex(1);
        }

        .analog-scale-widget {
            // same width as range-widget inside it
            width: 200px;
        }
    }

    &.invalid-constraint,
    &.invalid-required {

        .or-constraint-msg.active,
        .or-required-msg.active {
            position: absolute;
            bottom: 10px;
        }
    }
}

// corrections for pages mode
.pages.or [role="page"].current {
    &.or-analog-scale-initialized:not(.or-appearance-horizontal) {
        @include display-flex;
    }
}
